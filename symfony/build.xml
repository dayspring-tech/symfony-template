<?xml version="1.0" encoding="UTF-8"?>
<!-- build/clean.xml -->
<!-- http://joshuaestes.me/post/31732961725/symfony2-continuous-integration-with-jenkins-ant-and -->
<project name="project" default="build-parallel">
    <target name="build"
            depends="clean, git, prepare, lint, phploc, pdepend, phpmd-ci, phpcs-ci, phpcpd, symfony.test-all"/>

    <target name="build-parallel" depends="clean, git, prepare">
        <parallel threadCount="7">
            <antcall target="lint" />
            <antcall target="phploc" />
            <antcall target="pdepend" />
            <antcall target="phpmd-ci" />
            <antcall target="phpcs-ci" />
            <antcall target="phpcpd" />
            <antcall target="symfony.test-all" />
        </parallel>
    </target>

    <target name="clean"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <antcall target="symfony.clean" />
    </target>

    <target name="symfony.clean"
            description="Cleans up symfony data">
        <!--<delete file="${basedir}/composer.phar" />-->
        <delete file="${basedir}/app/config/parameters.yml" />
        <delete dir="${basedir}/app/cache" />
    </target>

    <target name="git"
            depends="clean"
            description="Updates submodules">
        <exec executable="git">
            <arg value="submodule"/>
            <arg value="update"/>
            <arg value="--init"/>
            <arg value="--recursive"/>
        </exec>
    </target>

    <target name="prepare"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <antcall target="symfony.prepare" />
    </target>

    <target name="check-composer">
        <available file="composer.phar" property="composer.present"/>
    </target>

    <target name="install-composer" depends="check-composer" unless="composer.present">
        <exec executable="bash">
            <arg value="-c" />
            <arg value="curl -s http://getcomposer.org/installer | php" />
        </exec>
    </target>

    <target name="symfony.prepare" depends="install-composer">
        <mkdir dir="${basedir}/app/cache" />
        <mkdir dir="${basedir}/web/uploads" />
        <copy file="${basedir}/app/config/parameters.yml.dist" tofile="${basedir}/app/config/parameters.yml" />

        <exec executable="php">
            <arg value="composer.phar" />
            <arg value="install" />
        </exec>

<!--    node is not required on this project
        <exec executable="npm">
            <arg value="install" />
        </exec>

        <exec executable="./node_modules/.bin/bower">
            <arg value="install" />
        </exec>
-->

        <!-- change db setup to use different schema for jenkins runs -->
        <exec executable="bash">
            <arg value="-c" />
            <arg value=" cat ${basedir}/app/config/config_jenkins.yml >> ${basedir}/app/config/config_test.yml" />
        </exec>

        <!-- run propel migration and model build -->
        <exec executable="php">
            <arg value="app/console" />
            <arg value="propel:migration:migrate" />
            <arg value="--env=test" />
        </exec>
        <exec executable="php">
            <arg value="app/console" />
            <arg value="propel:model:build" />
            <arg value="--env=test" />
        </exec>
        <exec executable="php">
            <arg value="app/console" />
            <arg value="assetic:dump" />
            <arg value="-n" />
            <arg value="--env=test" />
            <arg value="--no-debug" />
        </exec>
        <exec executable="php">
            <arg value="app/console" />
            <arg value="assets:install" />
            <arg value="-n" />
            <arg value="--env=test" />
            <arg value="--no-debug" />
        </exec>
    </target>

    <target name="lint"
            description="Syntax check">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/app">
                <include name="**/*.php" />
                <exclude name="**/cache/**" />
            </fileset>

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
            </fileset>

            <fileset dir="${basedir}/web">
                <include name="**/*.php" />
            </fileset>
        </apply>

        <apply executable="php" failonerror="true">
            <arg value="app/console" />
            <arg value="twig:lint" />
            <arg value="--env=test" />

            <fileset dir="${basedir}/app/Resources">
                <include name="**/*.twig" />
            </fileset>

            <fileset dir="${basedir}/src">
                <include name="**/*.twig" />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${basedir}/app,${basedir}/vendor,${basedir}/src/Dayspring/SecurityBundle/Model/map,${basedir}/src/Dayspring/SecurityBundle/Model/om" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <!--			<arg value="- -exclude" />
            <arg value="${basedir}/app" />
            <arg value="- -exclude" />
            <arg value="${basedir}/vendor" />-->
            <arg value="--exclude" />
            <arg value="Dayspring/SecurityBundle/Model/map" />
            <arg value="--exclude" />
            <arg value="Dayspring/SecurityBundle/Model/om" />
            <arg value="--exclude" />
            <arg value="DependencyInjection" />
            <arg value="--exclude" />
            <arg value="Tests" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <!--<arg value="- -ignore=${basedir}/vendor/*,${basedir}/app/*,${basedir}/web/*,*.js,*.css" />-->
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg value="--ignore=${basedir}/src/Dayspring/SecurityBundle/Resources" />
            <!--<arg value="- -ignore=${basedir}/vendor/*,${basedir}/app/*,${basedir}/web/*,*.js,*.css" />-->
            <arg path="${basedir}/src" />
        </exec>
    </target>


    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/app/Resources,${basedir}/src" />
            <arg value="text" />
            <arg value="${basedir}/build/phpmd.xml" />
            <arg value="--ignore"/>
            <arg value="*/Model/map,*/Model/om,Dayspring/SecurityBundle/Model/map,Dayspring/SecurityBundle/Model/om" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/app/Resources,${basedir}/src" />
            <arg value="xml" />
            <arg value="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
            <arg value="--exclude"/>
            <arg value="Dayspring/SecurityBundle/Model/map,Dayspring/SecurityBundle/Model/om" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox"/>
    </target>
    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>

    <target name="symfony.test-all"
            description="Runs all the functional and unit test">
        <exec executable="php">
            <arg value="app/console" />
            <arg value="propel:fixtures:load" />
            <arg value="--env=test" />
        </exec>

        <exec executable="phpunit"
              failonerror="false">
            <arg value="-c" />
            <arg value="app/phpunit-jenkins.xml.dist" />
        </exec>
    </target>

    <target name="symfony.test-only"
            description="Runs all the functional and unit tests, but no code coverage">
        <exec executable="php">
            <arg value="app/console" />
            <arg value="propel:fixtures:load" />
            <arg value="--env=test" />
        </exec>

        <exec executable="phpunit"
              failonerror="false">
            <arg value="-c" />
            <arg value="app/phpunit.xml.dist" />
        </exec>
    </target>
</project>